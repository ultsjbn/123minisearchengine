package code;import java.util.Arrays;/** @param <K> keys maintained by this map @param <V> mapped values Sources (link): https://www.geeksforgeeks.org/implementing-our-own-hash-table-with-separate-chaining-in-java/ https://opendsa-server.cs.vt.edu/ODSA/Books/CS3/html/HashIntro.html**/public class HashMap<K, V> {    // each linked list in the bucket    private static class Node<K, V> {        final K key;        V value;        Node<K, V> next;        Node(K key, V value) {            this.key = key;            this.value = value;            this.next = null;        }    }    private static final int DEFAULT_CAPACITY = 16;    private static final float DEFAULT_LOAD_FACTOR = 0.75f;    private Node<K, V>[] buckets;    private int size;    private final float loadFactor;    // empty hashmap    @SuppressWarnings("unchecked")    public HashMap() {        this.buckets = (Node<K, V>[]) new Node[DEFAULT_CAPACITY];        this.size = 0;        this.loadFactor = DEFAULT_LOAD_FACTOR;    }    // specified IC, default load factor    @SuppressWarnings("unchecked")    public HashMap(int initialCapacity) {        this.buckets = (Node<K, V>[]) new Node[initialCapacity];        this.size = 0;        this.loadFactor = DEFAULT_LOAD_FACTOR;    }    // specific IC, load factor    @SuppressWarnings("unchecked")    public HashMap(int initialCapacity, float loadFactor) {        this.buckets = (Node<K, V>[]) new Node[initialCapacity];        this.size = 0;        this.loadFactor = loadFactor;    }    // size / key value mappings    public int size() {        return size;    }    // if map has no key to value mappings (empty), return true    public boolean isEmpty() {        return size == 0;    }    // calculate index in the bucket array, returns hash code    private int hash(K key) {        return key == null ? 0 : Math.abs(key.hashCode()) % buckets.length;    }    // links the specified value with the specified key in this map.    // if the map already contains a mapping for the key, the old value is replaced.    public V put(K key, V value) {        if (size >= loadFactor * buckets.length) {            resize();        }        int index = hash(key);        // if bucket is empty, create new node        if (buckets[index] == null) {            buckets[index] = new Node<>(key, value);            size++;            return null;        }        // check if key already exists in the linked list        Node<K, V> current = buckets[index];        while (current != null) {            // update value and return old value if key exists            if ((key == null && current.key == null) ||                    (key != null && key.equals(current.key))) {                V oldValue = current.value;                current.value = value;                return oldValue;            }            if (current.next == null) {                break;            }            current = current.next;        }        // if key doesn't exist, add new node to the end of the list        current.next = new Node<>(key, value);        size++;        return null;    }    // returns the value to which the specified key is mapped, null if this map contains no mapping for the key.    public V get(K key) {        int index = hash(key);        Node<K, V> current = buckets[index];        while (current != null) {            if ((key == null && current.key == null) ||                    (key != null && key.equals(current.key))) {                return current.value;            }            current = current.next;        }        // if key not found        return null;    }    // if map contains a mapping for the specified key, return true    public boolean containsKey(K key) {        int index = hash(key);        Node<K, V> current = buckets[index];        while (current != null) {            if ((key == null && current.key == null) ||                    (key != null && key.equals(current.key))) {                return true;            }            current = current.next;        }        return false;    }    // remove mapping for specified key if present. return value previously associated w the key (null if no mapping)    public V remove(K key) {        int index = hash(key);        // no key exists if bucket is empty        if (buckets[index] == null) {            return null;        }        // if key is at the head of the list        if ((key == null && buckets[index].key == null) ||                (key != null && key.equals(buckets[index].key))) {            V oldValue = buckets[index].value;            buckets[index] = buckets[index].next;            size--;            return oldValue;        }        // check the rest of th list        Node<K, V> current = buckets[index];        while (current.next != null) {            if ((key == null && current.next.key == null) ||                    (key != null && key.equals(current.next.key))) {                V oldValue = current.next.value;                current.next = current.next.next;                size--;                return oldValue;            }            current = current.next;        }        return null;    }    // removes all the mappings from this map.    @SuppressWarnings("unchecked")    public void clear() {        buckets = (Node<K, V>[]) new Node[buckets.length];        size = 0;    }    // resizing to twice its current size and re-hashing    @SuppressWarnings("unchecked")    private void resize() {        Node<K, V>[] oldBuckets = buckets;        buckets = (Node<K, V>[]) new Node[oldBuckets.length * 2];        size = 0;        // Rehash all existing entries        for (Node<K, V> bucket : oldBuckets) {            Node<K, V> current = bucket;            while (current != null) {                put(current.key, current.value);                current = current.next;            }        }    }    // string representation    @Override    public String toString() {        StringBuilder sb = new StringBuilder("{");        boolean first = true;        for (Node<K, V> bucket : buckets) {            Node<K, V> current = bucket;            while (current != null) {                if (!first) {                    sb.append(", ");                }                sb.append(current.key).append("=").append(current.value);                first = false;                current = current.next;            }        }        return sb.append("}").toString();    }}