package code;import java.io.*;import java.util.*;public class MiniSearchEngine {    private HashMap invertedIndex;    private String[] documentNames;    // MiniSearchEngine()    public MiniSearchEngine() {        invertedIndex = new HashMap();    }    /** PART 1 : INDEXING     * loads and indexes the docs     * @param documentPaths array of file paths to docs     * @throws IOException if cant read a doc     * Sources: https://nlp.stanford.edu/IR-book/html/htmledition/a-first-take-at-building-an-inverted-index-1.html -     * my main source / guide ^     * **/    // indexDocuments()    public void indexDocuments(String[] documentPaths) throws IOException {        documentNames = documentPaths;        // loop for indexing the documents        for (int docId = 0; docId < documentPaths.length; docId++) {            File file = new File(documentPaths[docId]);            BufferedReader reader = new BufferedReader(new FileReader(file));            String line;            /** https://www.geeksforgeeks.org/inverted-index/ */            while ((line = reader.readLine()) != null) {                // tokenize the line into words                String[] words = tokenize(line);                // add each word to the inverted index (separated already)                for (String word : words) {                    invertedIndex.addWordOccurrence(word, docId);                }            }            reader.close();        }    }    /** tokenizes a line of text to words (kind of convert), converts to lowercase and removes punctuation     * Source : https://stackoverflow.com/questions/21946042/remove-all-spaces-and-punctuation-anything-not-a-letter-from-a-string*/    // tokenize()    private String[] tokenize(String line) {        // convert to lowercase and replace punctuation with spaces        line = line.toLowerCase().replaceAll("[^a-z0-9\\s]", " ");        // split by whitespace and filter out empty strings        return Arrays.stream(line.split("\\s+"))                .filter(word -> !word.isEmpty())                .toArray(String[]::new);    }    // converter for docId to actual name ng doc (since docId is an integer)    public String[] convertIDtoName(List<Integer> docIds) {        String[] result = new String[docIds.size()];        for (int i = 0; i < docIds.size(); i++) {            result[i] = documentNames[docIds.get(i)];        }        return result;    }    /** PART 2 : RETRIEVAL / QUERY     * searches the docs and processes different queries     * @param query - search query     * @return - array of doc names that matches the query     * Based on : https://github.com/adrianbrink/Java-Search-Engine/blob/master/src/main/java/Searcher.java     * **/    // search query, if and else statements if it contains an OR, AND, or single word    public String[] Search(String query) {        query = query.trim();        if (query.contains("AND")) {            return handleANDSearch(query);        } else if (query.contains("OR")) {            return handleORSearch(query);        } else {            return handleSimpleSearch(query);        }    }    // process single word query method    public String[] handleSimpleSearch(String query) {        query = query.toLowerCase();        List<Integer> result = invertedIndex.getDocuments(query);        return convertIDtoName(result);    }    // process query with AND    public String[] handleANDSearch(String query) {        /** https://www.geeksforgeeks.org/split-string-java-examples/ */        String[] terms = query.split(" AND ");        List<Integer> result = invertedIndex.getDocuments(terms[0]);        for (int i = 1; i < terms.length; i++) {            List<Integer> value = invertedIndex.getDocuments(terms[i]);            /** https://www.geeksforgeeks.org/java-collection-retainall-method/ */            result.retainAll(value); // intersection        }        return convertIDtoName(result);    }    // process query with OR    public String[] handleORSearch(String query) {        String[] terms = query.split(" OR ");        List<Integer> result = invertedIndex.getDocuments(terms[0]);        for(int i = 1; i < terms.length; i++) {            List<Integer> value = invertedIndex.getDocuments(terms[i]);            /** https://stackoverflow.com/a/16520227 */            value.removeAll(result); // removes same value from a set            result.addAll(value); // union        }        return convertIDtoName(result);    }}