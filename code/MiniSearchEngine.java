package code;import java.io.*;import java.util.*;public class MiniSearchEngine {    private HashMap invertedIndex;    private String[] documentNames;    // MiniSearchEngine()    public MiniSearchEngine() {        invertedIndex = new HashMap();    }    /** PART 1 : INDEXING     * loads and indexes the docs     * @param documentPaths array of file paths to docs     * @throws IOException if cant read a doc     * Sources: https://nlp.stanford.edu/IR-book/html/htmledition/a-first-take-at-building-an-inverted-index-1.html -     * my main source / guide ^     * **/    // indexDocuments()    public void indexDocuments(String[] documentPaths) throws IOException {        documentNames = documentPaths;        // loop for indexing the documents        for (int docId = 0; docId < documentPaths.length; docId++) {            File file = new File(documentPaths[docId]);            BufferedReader reader = new BufferedReader(new FileReader(file));            String line;            /** https://www.geeksforgeeks.org/inverted-index/ */            while ((line = reader.readLine()) != null) {                // tokenize the line into words                String[] words = tokenize(line);                // add each word to the inverted index (separated already)                for (String word : words) {                    invertedIndex.addWordOccurrence(word, docId);                }            }            reader.close();        }    }    /** tokenizes a line of text to words (kind of convert), converts to lowercase and removes punctuation     * Source : https://stackoverflow.com/questions/21946042/remove-all-spaces-and-punctuation-anything-not-a-letter-from-a-string*/    // tokenize()    private String[] tokenize(String line) {        // convert to lowercase and replace punctuation with spaces        line = line.toLowerCase().replaceAll("[^a-z0-9\\s]", " ");        // split by whitespace and filter out empty strings        return Arrays.stream(line.split("\\s+"))                .filter(word -> !word.isEmpty())                .toArray(String[]::new);    }    public void printInvertedIndex() {        List<String> allWords = invertedIndex.getAllWords();        Collections.sort(allWords);        for (String word : allWords) {            List<Integer> docIds = invertedIndex.getDocuments(word);            List<String> docNames = new ArrayList<>();            for (int docId : docIds) {                docNames.add(documentNames[docId]);            }            System.out.println(word + "\t" + docNames);        }    }    // Converts document path to name of file    public void Converter() {        for (int i = 0; i < documentNames.length; i++) {            switch (documentNames[i]) {                case "documents/Mozzarella.txt" -> documentNames[i] = "Mozzarella.txt";                case "documents/Cheddar.txt" -> documentNames[i] = "Cheddar.txt";                case "documents/Parmesan.txt" -> documentNames[i] = "Parmesan.txt";            }        }    }    /** PART 2 : QUERY     * searches the docs and processes different queries     * @param query - search query     * @return - array of doc names that matches the query     * Sources: https://github.com/adrianbrink/Java-Search-Engine/blob/master/src/main/java/Searcher.java     * **/    // search query, if and else statements if it contains an OR, AND, or single word    public String[] Search(String query) {        query = query.trim();        return handleSimpleSearch(query);    }    // process single word query method    public String[] handleSimpleSearch(String word) {        word = word.toLowerCase();        List<Integer> value = invertedIndex.getDocuments(word);        String sample = value.toString();        return sample.split("\\s+");    }    // process query with AND    // process query with OR    // converter for docId to actual name ng doc (since docId is an integer)}